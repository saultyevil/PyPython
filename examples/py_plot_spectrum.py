#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This script will create various figures for the spectrum generated by a model.
It creates the following figures:
    - A single panel figure with all spectra plotted
    - A multiple panel figure with each spectrum in its own panel
    - Multiple files containing a single panel, done for each spectrum
"""


import argparse as ap
from typing import Tuple
from matplotlib import pyplot as plt
from sys import exit

from PyPython import SpectrumUtils
from PyPython import SpectrumPlot
from PyPython.Error import EXIT_FAIL


plt.rcParams['xtick.labelsize'] = 15
plt.rcParams['ytick.labelsize'] = 15


def spectra_on_same_panel(root: str, wd: str = "./", xmin: float = None, xmax: float = None, smooth_amount: int = 5,
                          frequency_space: bool = False, axes_scales: str = "logy", common_lines: bool = True,
                          file_ext: str = "png") \
        -> Tuple[plt.Figure, plt.Axes]:
    """
    Plot all of the spectra of a model on the same panel.

    :return:
    """

    spectrum_filename = "{}/{}.spec".format(wd, root)

    try:
        s = SpectrumUtils.read_spec(spectrum_filename)
    except IOError:
        print("Unable to open the spectrum file with name {}".format(spectrum_filename))
        return

    ia = SpectrumUtils.spec_inclinations(s)
    fig, ax = plt.subplots(1, 1, figsize=(12, 8))

    xlabel = "Lambda"
    if frequency_space:
        xlabel = "Freq."
        axes_scales = "loglog"
    x = s[xlabel].values

    if frequency_space:
        xlabel = r"Frequency [Hz]"
        ylabel = r"$\nu F_{\nu}$ (erg s$^{-1}$ cm$^{-2}$"
    else:
        xlabel = r"Wavelength [$\AA$]"
        ylabel = r"$F_{\lambda}$ (erg s$^{-1}$ cm$^{-2}$ $\AA^{-1}$)"

    # Plot each inclination a in ia on the same ax object

    for a in ia:
        y = SpectrumUtils.smooth(s[a].values, smooth_amount)
        # Convert into lambda F_lambda which is (I hope) the same as nu F_nu
        if frequency_space:
            y *= s["Lambda"].values
        fig, ax = SpectrumPlot.plot(x, y, xmin, xmax, xlabel, ylabel, axes_scales, fig, ax,
                                    label=str(a) + r"$^{\circ}$")

    ax.legend()

    if common_lines:
        ax = SpectrumUtils.plot_line_ids(ax, SpectrumUtils.common_lines())

    fig.tight_layout(rect=[0.015, 0.015, 0.985, 0.985])
    fig.savefig("{}/{}_spectra_panel.{}".format(wd, root, file_ext))

    return fig, ax


def spectra_on_multiple_panels() \
        -> Tuple[plt.Figure, plt.Axes]:
    """
    Plot each separate spectrum in individual panels.

    :return:
    """

    return


def individual_spectra() \
        -> None:
    """
    Plot each separate spectrum as its own file.

    :return:
    """

    return


def parse_input() -> tuple:
    """
    Parse the different modes this script can be run from the command line.

    Returns
    -------
    setup: tuple
        A list containing all of the different setup of parameters for plotting.

        setup = (
            args.root,
            wd,
            xmin,
            xmax,
            frequency_space,
            absorption_edges,
            axes_scales,
            file_ext,
            display
        )
    """

    p = ap.ArgumentParser(description=__doc__)
    p.add_argument("root", help="The root name of the simulation.")
    p.add_argument("-wd", action="store", help="The directory containing the simulation.")
    p.add_argument("-xl", "--xmin", action="store", help="The lower x-axis boundary to display.")
    p.add_argument("-xu", "--xmax", action="store", help="The upper x-axis boundary to display.")
    p.add_argument("-s", "--scales", action="store", help="The axes scaling to use: logx, logy, loglog, linlin.")
    p.add_argument("-l", "--common_lines", action="store_true", help="Plot labels for important absorption edges.")
    p.add_argument("-f", "--frequency_space", action="store_true", help="Create the figure in frequency space.")
    p.add_argument("-sm", "--smooth_amount", action="store", help="The size of the boxcar smoothing filter.")
    p.add_argument("-e", "--ext", action="store", help="The file extension for the output figure.")
    p.add_argument("--display", action="store_true", help="Display the plot before exiting the script.")
    args = p.parse_args()

    wd = "./"
    if args.wd:
        wd = args.wd

    xmin = None
    if args.xmin:
        xmin = args.xmin

    xmax = None
    if args.xmax:
        xmax = args.xmax

    common_lines = True
    if args.common_lines:
        common_lines = args.common_lines

    frequency_space = False
    if args.frequency_space:
        frequency_space = args.frequency_space

    file_ext = "png"
    if args.ext:
        file_ext = args.ext

    axes_scales = "logy"
    if args.scales:
        allowed = ["logx", "logy", "loglog", "linlin"]
        if args.scales not in allowed:
            print("The axes scaling {} is unknown.".format(args.scales))
            print("Allowed values are: logx, logy, loglog, linlin.")
            exit(EXIT_FAIL)
        axes_scales = args.scales

    smooth_amount = 5
    if args.smooth_amount:
        smooth_amount = int(args.smooth_amount)
        if smooth_amount < 1:
            print("The size of the smoothing filter must at least be 1")
            exit(EXIT_FAIL)

    display = False
    if args.display:
        display = True

    setup = (
        args.root,
        wd,
        xmin,
        xmax,
        frequency_space,
        common_lines,
        axes_scales,
        smooth_amount,
        file_ext,
        display
    )

    return setup


def main(setup: tuple = None) -> Tuple[plt.Figure, plt.Axes]:
    """
    The main function of the script. First, the important wind quantaties are
    plotted. This is then followed by the important ions.

`   Parameters
    ----------
    setup: tuple
        A tuple containing the setup parameters to run the script. If this
        isn't provided, then the script will parse them from the command line.

        setup = (
            root,
            wd,
            xmin,
            xmax,
            frequency_space,
            common_lines,
            axes_scales,
            smooth_amount,
            file_ext,
            display
        )

    Returns
    -------
    fig: plt.Figure
        The matplotlib Figure object for the created plot.
    ax: plt.Axes
        The matplotlib Axes objects for the plot panels.
    """

    div_len = 80

    if setup:
        root, wd, xmin, xmax, frequency_space, common_lines, axes_scales, smooth_amount, file_ext, display = setup
    else:
        root, wd, xmin, xmax, frequency_space, common_lines, axes_scales, smooth_amount, file_ext, display = \
            parse_input()

    root = root.replace("/", "")
    wdd = wd
    if wd == "./":
        wdd = ""

    print("-" * div_len)
    print("\nCreating figure with spectra on the same panel for {}{}.pf".format(wdd, root))

    fig, ax = spectra_on_same_panel(root, wd, xmin, xmax, smooth_amount, frequency_space, axes_scales, common_lines,
                                    file_ext)

    if display:
        plt.show()

    print("")
    print("-" * div_len)

    return fig, ax


if __name__ == "__main__":
    fig, ax = main()
